"use strict";function _interopDefault(e){return e&&"object"==typeof e&&"default"in e?e.default:e}Object.defineProperty(exports,"__esModule",{value:!0});var http=_interopDefault(require("http")),zlib=_interopDefault(require("zlib")),express=_interopDefault(require("express")),compression=_interopDefault(require("compression")),cors=_interopDefault(require("cors")),cookieParser=_interopDefault(require("cookie-parser")),mongoose=_interopDefault(require("mongoose"));const isString=e=>Boolean(e&&"string"==typeof e),isEmpty=e=>{return!("function"==typeof e)&&!("boolean"==typeof e)&&(!e||("string"==typeof e&&""===e.trim()||!!(Array.isArray(e)&&e.length<=0)))},sleep=e=>new Promise(o=>setTimeout(o,e)),toggleBooleans=(e,o=!1)=>{if(!o)return e;return!!(o^e)},isEmpty$1=e=>isEmpty(e),toLowerCase=e=>isString(e)?e.toUpperCase():e,toLowerCase$1=e=>isString(e)?e.toLowerCase():e,removeWhitespaces=e=>{if("string"!=typeof e||!e.length)return e;let o=e.trim();return o=(o=o.replace(/&nbsp;/g," ")).replace(/\s+/g,"")},trimValue=e=>(e&&"string"==typeof e&&e||"").trim(),slugify=(e="",o="",r="")=>{const t="àáäâèéëêìíïîòóöôùúüûñçßÿœæŕśńṕẃǵǹḿǘẍźḧ·/_,:;",n=new RegExp(t.split("").join("|"),"g");let s=trimValue(o);s=s&&`${s}-`||"";let i=trimValue(r);i=i&&`-${i}`||"";const c=e&&""!==e&&e.toString().toLowerCase().replace(/\s+/g,"-").replace(n,e=>"aaaaeeeeiiiioooouuuuncsyoarsnpwgnmuxzh------".charAt(t.indexOf(e))).replace(/&/g,"-and-").replace(/[^\w-]+/g,"").replace(/--+/g,"-").replace(/^-+/,"").replace(/-+$/,"");return c&&`${s}${c}${i}`||""},ucfirst=e=>e.charAt(0).toUpperCase()+e.slice(1),COLORS={BLUE:34,CYAN:36,GRAY:90,GREEN:32,MAGENTA:35,RED:31,WHITE:37,YELLOW:33},getColor=(e,o)=>`[${o}m${e}[39m`,colors={blue:e=>getColor(e,COLORS.BLUE),bold:e=>`[0;1m${e}[0;0m`,cyan:e=>getColor(e,COLORS.CYAN),gray:e=>getColor(e,COLORS.GRAY),green:e=>getColor(e,COLORS.GREEN),grey:e=>getColor(e,COLORS.GRAY),magenta:e=>getColor(e,COLORS.MAGENTA),red:e=>getColor(e,COLORS.RED),white:e=>getColor(e,COLORS.WHITE),yellow:e=>getColor(e,COLORS.YELLOW)},EOL="\n";function trace(e,o="stdout"){Boolean(process[o]&&process[o].isTTY)?process[o].write(`${e}${EOL}`):console.log(e)}const Logger={colors:colors,debug:e=>{trace(colors.gray(e))},error:e=>{trace(colors.red(`Error: ${e}`),"stderr")},info:e=>{trace(colors.magenta(e))},log:e=>{trace(e)},ok:e=>{trace(colors.green(e))},warning:e=>{trace(colors.yellow(`Warning: ${e}`))}},merge=(e,o)=>({...e,...o}),DEFAULT_PORT=3001,DEFAULT_URL_EXTENDED=!0,DEFAULT_REQUEST_LIMIT="2mb",DEFAULT_PARAMETER_LIMIT=1e5,DEFAULT_ROUTES={"*":{all:(e,o,r)=>{Logger.log(`request ${e.method} ${e.url}`),r()}},"/":{get:(e,o)=>o.send("<h1>Hello world !</h1>")}};function createExpressApplication(){const e=express();return e.use(cors()),e.use(cookieParser()),e.use(compression({level:zlib.Z_DEFAULT_COMPRESSION})),e.use(express.json()),e.use(express.urlencoded({extended:DEFAULT_URL_EXTENDED,limit:DEFAULT_REQUEST_LIMIT,parameterLimit:DEFAULT_PARAMETER_LIMIT})),e}function parseApplicationRoutes(e,o){Object.keys(o).forEach(r=>{if(!(isString(r)&&!isEmpty(r)))return;const t=o[r];Object.keys(t).forEach(t=>{const n=o[r][t];e[t](r,n)})})}function createHTTPServer(){const e=http.createServer();return process.on("SIGINT",()=>{Logger.info("[Express] Stop signal received"),e.close(()=>{Logger.ok("[Express] Server closed")})}),e}function createExpressServer(e={},o=DEFAULT_PORT){const r=`http://localhost:${o}`,t=merge(DEFAULT_ROUTES,e);parseApplicationRoutes(createExpressApplication(),t);const n=createHTTPServer();return new Promise(e=>{n.listen(o,()=>{Logger.ok(`[Express] Server listening under ${r}`),e(n,r)})})}const MONGOOSE_DRIVER_NAME="mongoose";let driver=null;function registerDriver(e){driver=e}function configureDriver(e){e.set("useNewUrlParser",!0),e.set("useUnifiedTopology",!0)}function getMongooseDriver(){return driver||(registerDriver(mongoose),configureDriver(mongoose),driver)}function getDriverByName(e){switch(e){case MONGOOSE_DRIVER_NAME:return getMongooseDriver();default:return null}}const mongooseOptions={autoIndex:!0,autoReconnect:!0,reconnectTries:Number.MAX_VALUE,useNewUrlParser:!0,useUnifiedTopology:!0};function getMongooseConnector(){const e=getMongooseDriver();return{connect:(o,r=27017,t="127.0.0.1")=>new Promise(n=>{const s=`mongodb://${t}:${r}/${o}`;e.connection.on("connecting",()=>{Logger.info("[MongoDB] Waiting for database connection...")}),e.connection.on("connected",()=>{Logger.ok(`[MongoDB] Connected to ${s}`),n({driver:e,url:s})}),e.connection.on("disconnected",()=>{Logger.error(`[MongoDB] Disconnected from ${s}`)}),e.connection.on("close",()=>{Logger.ok(`[MongoDB] Connection ${s} closed`)}),e.connect(s,mongooseOptions)}),disconnect:()=>{}}}function getConnectorByName(e){switch(e){case MONGOOSE_DRIVER_NAME:return getMongooseConnector();default:return null}}exports.Logger=Logger,exports.MONGOOSE_DRIVER_NAME=MONGOOSE_DRIVER_NAME,exports.createExpressServer=createExpressServer,exports.getConnectorByName=getConnectorByName,exports.getDriverByName=getDriverByName,exports.isEmpty=isEmpty$1,exports.isString=isString,exports.removeWhitespaces=removeWhitespaces,exports.sleep=sleep,exports.slugify=slugify,exports.toLowerCase=toLowerCase$1,exports.toUpperCase=toLowerCase,exports.toggleBooleans=toggleBooleans,exports.ucfirst=ucfirst;
